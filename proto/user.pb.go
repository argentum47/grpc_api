// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	Empty
	AddUserRequest
	GetUserRequest
	LoginUserRequest
	User
	Users
	Error
	UserResponse
	UsersResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AddUserRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *AddUserRequest) Reset()                    { *m = AddUserRequest{} }
func (m *AddUserRequest) String() string            { return proto1.CompactTextString(m) }
func (*AddUserRequest) ProtoMessage()               {}
func (*AddUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AddUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AddUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetUserRequest struct {
	Headers map[string]string `protobuf:"bytes,1,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Params  map[string]string `protobuf:"bytes,2,rep,name=params" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetUserRequest) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *GetUserRequest) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type LoginUserRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginUserRequest) Reset()                    { *m = LoginUserRequest{} }
func (m *LoginUserRequest) String() string            { return proto1.CompactTextString(m) }
func (*LoginUserRequest) ProtoMessage()               {}
func (*LoginUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LoginUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type User struct {
	Id          int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email       string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	AccessToken string `protobuf:"bytes,4,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto1.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type Users struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *Users) Reset()                    { *m = Users{} }
func (m *Users) String() string            { return proto1.CompactTextString(m) }
func (*Users) ProtoMessage()               {}
func (*Users) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Users) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type Error struct {
	Reason string `protobuf:"bytes,1,opt,name=reason" json:"reason,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto1.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Error) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type UserResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*UserResponse_User
	//	*UserResponse_Error
	Data isUserResponse_Data `protobuf_oneof:"data"`
}

func (m *UserResponse) Reset()                    { *m = UserResponse{} }
func (m *UserResponse) String() string            { return proto1.CompactTextString(m) }
func (*UserResponse) ProtoMessage()               {}
func (*UserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isUserResponse_Data interface {
	isUserResponse_Data()
}

type UserResponse_User struct {
	User *User `protobuf:"bytes,2,opt,name=user,oneof"`
}
type UserResponse_Error struct {
	Error *Error `protobuf:"bytes,3,opt,name=error,oneof"`
}

func (*UserResponse_User) isUserResponse_Data()  {}
func (*UserResponse_Error) isUserResponse_Data() {}

func (m *UserResponse) GetData() isUserResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UserResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *UserResponse) GetUser() *User {
	if x, ok := m.GetData().(*UserResponse_User); ok {
		return x.User
	}
	return nil
}

func (m *UserResponse) GetError() *Error {
	if x, ok := m.GetData().(*UserResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UserResponse) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _UserResponse_OneofMarshaler, _UserResponse_OneofUnmarshaler, _UserResponse_OneofSizer, []interface{}{
		(*UserResponse_User)(nil),
		(*UserResponse_Error)(nil),
	}
}

func _UserResponse_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*UserResponse)
	// data
	switch x := m.Data.(type) {
	case *UserResponse_User:
		b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.User); err != nil {
			return err
		}
	case *UserResponse_Error:
		b.EncodeVarint(3<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UserResponse.Data has unexpected type %T", x)
	}
	return nil
}

func _UserResponse_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*UserResponse)
	switch tag {
	case 2: // data.user
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(User)
		err := b.DecodeMessage(msg)
		m.Data = &UserResponse_User{msg}
		return true, err
	case 3: // data.error
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Data = &UserResponse_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UserResponse_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*UserResponse)
	// data
	switch x := m.Data.(type) {
	case *UserResponse_User:
		s := proto1.Size(x.User)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *UserResponse_Error:
		s := proto1.Size(x.Error)
		n += proto1.SizeVarint(3<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type UsersResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*UsersResponse_Users
	//	*UsersResponse_Error
	Data isUsersResponse_Data `protobuf_oneof:"data"`
}

func (m *UsersResponse) Reset()                    { *m = UsersResponse{} }
func (m *UsersResponse) String() string            { return proto1.CompactTextString(m) }
func (*UsersResponse) ProtoMessage()               {}
func (*UsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type isUsersResponse_Data interface {
	isUsersResponse_Data()
}

type UsersResponse_Users struct {
	Users *Users `protobuf:"bytes,2,opt,name=users,oneof"`
}
type UsersResponse_Error struct {
	Error *Error `protobuf:"bytes,3,opt,name=error,oneof"`
}

func (*UsersResponse_Users) isUsersResponse_Data() {}
func (*UsersResponse_Error) isUsersResponse_Data() {}

func (m *UsersResponse) GetData() isUsersResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UsersResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *UsersResponse) GetUsers() *Users {
	if x, ok := m.GetData().(*UsersResponse_Users); ok {
		return x.Users
	}
	return nil
}

func (m *UsersResponse) GetError() *Error {
	if x, ok := m.GetData().(*UsersResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UsersResponse) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _UsersResponse_OneofMarshaler, _UsersResponse_OneofUnmarshaler, _UsersResponse_OneofSizer, []interface{}{
		(*UsersResponse_Users)(nil),
		(*UsersResponse_Error)(nil),
	}
}

func _UsersResponse_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*UsersResponse)
	// data
	switch x := m.Data.(type) {
	case *UsersResponse_Users:
		b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Users); err != nil {
			return err
		}
	case *UsersResponse_Error:
		b.EncodeVarint(3<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UsersResponse.Data has unexpected type %T", x)
	}
	return nil
}

func _UsersResponse_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*UsersResponse)
	switch tag {
	case 2: // data.users
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Users)
		err := b.DecodeMessage(msg)
		m.Data = &UsersResponse_Users{msg}
		return true, err
	case 3: // data.error
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Data = &UsersResponse_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UsersResponse_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*UsersResponse)
	// data
	switch x := m.Data.(type) {
	case *UsersResponse_Users:
		s := proto1.Size(x.Users)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *UsersResponse_Error:
		s := proto1.Size(x.Error)
		n += proto1.SizeVarint(3<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
	proto1.RegisterType((*AddUserRequest)(nil), "proto.AddUserRequest")
	proto1.RegisterType((*GetUserRequest)(nil), "proto.GetUserRequest")
	proto1.RegisterType((*LoginUserRequest)(nil), "proto.LoginUserRequest")
	proto1.RegisterType((*User)(nil), "proto.User")
	proto1.RegisterType((*Users)(nil), "proto.Users")
	proto1.RegisterType((*Error)(nil), "proto.Error")
	proto1.RegisterType((*UserResponse)(nil), "proto.UserResponse")
	proto1.RegisterType((*UsersResponse)(nil), "proto.UsersResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/AddUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/LoginUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	AddUser(context.Context, *AddUserRequest) (*UserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*UserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*UserResponse, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserService_AddUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _UserService_LoginUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto1.RegisterFile("user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x4b, 0x6f, 0xd3, 0x40,
	0x10, 0x8e, 0x5f, 0x71, 0x3b, 0x0e, 0x51, 0x35, 0xbc, 0xac, 0x5c, 0x68, 0x56, 0x3d, 0x54, 0x1c,
	0x72, 0x08, 0x87, 0xd2, 0xc2, 0x05, 0x44, 0x44, 0x0e, 0x1c, 0x90, 0x79, 0x5c, 0xd1, 0x12, 0x8f,
	0xc0, 0x6a, 0x63, 0x9b, 0x5d, 0xa7, 0x28, 0x07, 0x24, 0x7e, 0x18, 0x3f, 0x0e, 0xed, 0xec, 0x3a,
	0xb1, 0x11, 0x95, 0xa8, 0x38, 0x79, 0xe7, 0xf1, 0x7d, 0xdf, 0x7e, 0xe3, 0x1d, 0x80, 0x8d, 0x26,
	0x35, 0xab, 0x55, 0xd5, 0x54, 0x18, 0xf1, 0x47, 0xc4, 0x10, 0x2d, 0xd6, 0x75, 0xb3, 0x15, 0x1f,
	0x61, 0xfc, 0x22, 0xcf, 0x3f, 0x68, 0x52, 0x19, 0x7d, 0xdb, 0x90, 0x6e, 0xf0, 0x1e, 0x44, 0xb4,
	0x96, 0xc5, 0x55, 0xea, 0x1d, 0x7b, 0xa7, 0x87, 0x99, 0x0d, 0x70, 0x02, 0x07, 0xb5, 0xd4, 0xfa,
	0x7b, 0xa5, 0xf2, 0xd4, 0xe7, 0xc2, 0x2e, 0x46, 0x84, 0xb0, 0x94, 0x6b, 0x4a, 0x03, 0xce, 0xf3,
	0x59, 0xfc, 0xf4, 0x61, 0xfc, 0x9a, 0x9a, 0x2e, 0xf1, 0x73, 0x88, 0xbf, 0x92, 0xcc, 0x49, 0xe9,
	0xd4, 0x3b, 0x0e, 0x4e, 0x93, 0xb9, 0xb0, 0x77, 0x9a, 0xf5, 0xfb, 0x66, 0x4b, 0xdb, 0xb4, 0x28,
	0x1b, 0xb5, 0xcd, 0x5a, 0x08, 0x9e, 0xc3, 0xb0, 0x96, 0x4a, 0xae, 0x75, 0xea, 0x33, 0x78, 0xfa,
	0x77, 0xf0, 0x5b, 0xee, 0xb1, 0x58, 0x07, 0x98, 0x5c, 0xc0, 0xa8, 0xcb, 0x89, 0x47, 0x10, 0x5c,
	0xd2, 0xd6, 0xf9, 0x33, 0x47, 0xe3, 0xf9, 0x5a, 0x5e, 0x6d, 0xc8, 0x59, 0xb3, 0xc1, 0x85, 0xff,
	0xd4, 0x9b, 0x9c, 0x43, 0xd2, 0xa1, 0xbc, 0x0d, 0x54, 0xbc, 0x82, 0xa3, 0x37, 0xd5, 0x97, 0xa2,
	0xfc, 0xaf, 0xe1, 0x8a, 0x15, 0x84, 0x86, 0x00, 0xc7, 0xe0, 0x17, 0x39, 0xc3, 0x82, 0xcc, 0x2f,
	0xf6, 0x43, 0xf7, 0xf7, 0x43, 0xdf, 0xb3, 0x07, 0x5d, 0xf6, 0x29, 0x8c, 0xe4, 0x6a, 0x45, 0x5a,
	0x7f, 0x6a, 0xaa, 0x4b, 0x2a, 0xd3, 0x90, 0x8b, 0x89, 0xcd, 0xbd, 0x37, 0x29, 0xf1, 0x18, 0x22,
	0x23, 0xa2, 0x71, 0x0a, 0x91, 0x79, 0x2c, 0xed, 0x1f, 0x4a, 0xdc, 0x90, 0xd9, 0x82, 0xad, 0x88,
	0x47, 0x10, 0x2d, 0x94, 0xaa, 0x14, 0x3e, 0x80, 0xa1, 0x22, 0xa9, 0xab, 0xd2, 0x99, 0x71, 0x91,
	0xd8, 0xc2, 0xc8, 0x5a, 0xd6, 0x75, 0x55, 0x6a, 0xc2, 0x14, 0x62, 0xbd, 0x61, 0x31, 0x6e, 0x3c,
	0xc8, 0xda, 0x10, 0xa7, 0x10, 0x1a, 0x4e, 0xf6, 0xd0, 0x17, 0x5b, 0x0e, 0x32, 0x2e, 0xe1, 0x09,
	0x44, 0x64, 0xd4, 0xd8, 0x52, 0x32, 0x1f, 0xb9, 0x1e, 0xbe, 0xc1, 0x72, 0x90, 0xd9, 0xe2, 0xcb,
	0x21, 0x84, 0xb9, 0x6c, 0xa4, 0xf8, 0x01, 0x77, 0xd8, 0xc7, 0x3f, 0x68, 0x9f, 0xb4, 0x4e, 0xfd,
	0x1e, 0x31, 0xc3, 0x0d, 0x31, 0x17, 0x6f, 0x27, 0x3f, 0xff, 0xe5, 0x41, 0x62, 0x08, 0xde, 0x91,
	0xba, 0x2e, 0x56, 0x84, 0x67, 0x10, 0xbb, 0xe5, 0xc2, 0xfb, 0x0e, 0xd9, 0x5f, 0xb6, 0xc9, 0xdd,
	0xee, 0x80, 0xdd, 0xa5, 0xc5, 0x00, 0x9f, 0xc1, 0xe1, 0xee, 0xe9, 0xe0, 0x43, 0xd7, 0xf3, 0xe7,
	0x63, 0xba, 0x09, 0x7c, 0x06, 0xb1, 0x5b, 0x8a, 0x9d, 0x6a, 0x7f, 0x49, 0x6e, 0x00, 0x7e, 0x1e,
	0x72, 0xf6, 0xc9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x53, 0x81, 0x69, 0x5b, 0x30, 0x04, 0x00,
	0x00,
}
